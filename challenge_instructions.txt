# Developer Challenges

## Instructions

Below are three code challenges. We would like you to try to complete these challenges and return your solutions to us at some point before your interview. The challenges should take less than an hour to complete, but we understand that you may have other commitments and time constraints.

In answering the challenges, please submit code as if you intended to ship it to production. Feel free to use any language features that you see fit, and to submit your solutions in any way you see fit too. Solutions to the challenges should be submitted in JavaScript.

If you're not able to complete the challenges then don't worry, just send over what you were able to do. We'll look through your solutions together during your interview.

Good luck! ðŸ˜ƒ

## Challenge 1

Greet (in order of ascending age) all people aged `minAge` and over. The greeting should be in the following format:

```
Hello name1, name2, name3, name4, and name5!
```

Write a `greet` function which, given an array of people and a minAge, returns the expected string.

```js
const people = [{
  name: 'Alex',
  age: 27,
}, {
  name: 'Bob',
  age: 35,
}, {
  name: 'Carl',
  age: 17,
}, {
  name: 'Dave',
  age: 20,
}, {
  name: 'Emily',
  age: 22,
}, {
  name: 'Fred',
  age: 19,
}];
```

Given the above data, the expected output is:

```
greet(people, 30); // Returns: 'Hello Bob!'
greet(people, 25); // Returns: 'Hello Alex and Bob!'
greet(people, 21); // Returns: 'Hello Emily, Alex, and Bob!'
greet(people, 20); // Returns: 'Hello Dave, Emily, Alex, and Bob!'
```

## Challenge 2

A coloured triangle is created from a row of colours, each of which is red, green or blue. Successive rows, each containing one fewer colour than the last, are generated by considering the two touching colours in the previous row. If these colours are identical, the same colour is used in the new row. If they are different, the missing colour is used in the new row. This is continued until the final row, with only a single colour, is generated.

The different possibilities are:

```
Colour here:        G G        B G        R G        B R
Becomes colour:      G          R          B          G
```

With a bigger example:

```
R R G B R G B B
 R B R G B R B
  G G B R G G
   G R G B G
    B B R R
     B G R
      R B
       G
```

Write a `triangle` function which, given the first row of the triangle as a string, returns the final colour which would appear in the bottom row as a string. In the case of the example above, you would be given `RRGBRGBB` you should return `G`.

If you are only given one colour as the input, return that colour.

Below are some expected outputs for given inputs.

```js
triangle('GB'); // Returns: 'R'
triangle('RRR'); // Returns: 'R'
triangle('RGBG'); // Returns: 'B'
triangle('RBRGBRB'); // Returns: 'G'
triangle('RBRGBRBGGRRRBGBBBGG'); // Returns: 'G'
triangle('B'); // Returns: 'B'
```

## Challenge 3

Your job is to fix the parentheses so that all opening and closing parentheses (brackets) have matching counterparts. You will do this by appending parentheses to the beginning or end of the string. The result should be of minimum length. Don't add unnecessary parentheses.

The input will be a string of varying length, only containing `(` and/or `)`.

For example:

```js
balance('(('); // Returns: '(())'
balance('))))(()('); // Returns: '(((())))(()())'
```
